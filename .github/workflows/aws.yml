# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions
on:
  push:
    branches: [ "develop" ]
#  pull_request:
#    branches: [ "master" ]
env:
  MODULE_ROOT_PATH: ./collie_api_b2r # 해당 모듈의 루트
  MODULE_JAR: ./collie_api_b2r/build/libs/test_web_b2r-0.0.1-SNAPSHOT.jar # 해당 모듈의 jar
  MODULE_DEPLOY_PATH: ./collie_api_b2r/deploy # 해당 모듈의 deploy 디렉토리
  MODULE_DEPLOY_APPSPEC: ./collie_api_b2r/deploy/appspec-test_web_xdm.yml # 해당 모듈의 appspec 파일
  AWS_REGION: ap-northeast-2 # aws 리전
  S3_BUCKET_NAME: test-awss3-vic # s3 버켓 이름
  AWS_CODE_DEPLOY_APP_NAME: test-server # aws code deploy 애플리케이션 이름
  AWS_CODE_DEPLOY_APP_GROUP_NAME: test-server-group # 애플리케이션 그룹 이름
jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Grant execute permission for root gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: create main boot jar
        run: ./gradlew bootJar -p $MODULE_ROOT_PATH

      - name: Copy Jar
        run: cp $MODULE_JAR deploy.jar

      - name: cp appspec file
        run: cp $MODULE_DEPLOY_APPSPEC appspec.yml

      - name: cp script files
        run: cp -r $MODULE_DEPLOY_PATH scripts

      - name: Make zip file
        run: zip -r ./$GITHUB_SHA.zip ./appspec.yml ./deploy.jar ./scripts
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: my-ecr-repo
        IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: my-container
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: my-service
          cluster: my-cluster
          wait-for-service-stability: tr